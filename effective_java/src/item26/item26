아이템26. 로 타입은 사용하지 말라
제네릭 타입	Generic Type	List<E>
로 타입	Raw Type	List

사용하면 안되는 이유?
Private final Collection stamps=…;
위 코드의 stamps는 Stamp 원소만 받고자 만든 것이지만 다른 원소가 들어가도 컴파일되고 실행된다.
Stamps.add(new Coin(…)); //같은 컬렉션이라 모름.
컴파일 오류를 발생시키지 않으므로 실행중에 오류(Runtime Exception)가 발생할 수 있다. 예를 들어, add한 Coin 객체를 꺼내서 Stamp 변수에 할당하는 순간! ClassCastException이 발생한다.

제네릭 지원 이후
private final Collection<Stamp> stamps = ...;
stamps.add(new Coin()); // 컴파일 오류 발생

그렇다면 사용하지 않는 것을 권장하는데 왜 그대로 남겨두었을까?
	제네릭이 등장하기 이전의 코드와의 호환성을 위해서 남겨졌습니다.

로 타입을 사용하면 런타임에 예외가 일어날 수 있고 제네릭이 주는 안전성과 표현력을 잃게 되므로 절대로 사용해서는 안된다.
List (로타입) -> 사용하면X
List<Object<(매개변수화 타입) -> 사용해도O

List는 제네릭 타입에서 완전히 발을 뺀 것, List<Object>는 모든 타입을 허용한다는 의사를 컴파일러에 명확히 전달한 것.

매개변수로 List를 받는 메서드에 List<String>을 넘길 수 O
매개변수로 List<Object>를 받는 메서드에 List<String>을 넘길 수 X

List<String>은 로 타입인 List의 하위타입 O
List<String>은 List<Object>의 하위타입 X

public static void main(String[] args) {
    List<String> strings = new ArrayList<>();
    
    unsafeAdd(strings, Integer.valueOf(42));
    String s = strings.get(0);
}
// 로 타입
private static void unsafeAdd(List list, Object o) {
    list.add(o);
}
위의 코드는 컴파일은 성공하지만 로 타입인 List를 사용하여 unchecked call to add(E) as a member of raw type List... 라는 경고 메시지가 발생된다.
실행을 하게 되면 strings.get(0)의 결과를 형변환하려 할 때 ClassCastException이 발생한다.

위 코드를 List<Object>로 변경하면?
public static void main(String[] args) {
    List<String> strings = new ArrayList<>();

    unsafeAdd(strings, Integer.valueOf(42));
    String s = strings.get(0);
}
// List<Object>
private static void unsafeAdd(List<Object> list, Object o) {
    list.add(o);
}
컴파일 오류가 발생하며 incompatible types: List<String> cannot be converted to List<Object>... 라는 메시지가 출력된다. 실행 시점이 아닌 컴파일 시점에 오류를 확인할 수 있어 보다 안전하다.

원소타입을 모른 채 쓰고 싶다면?
Set<E> -> Set<?>
어떤 타입이라도 담을 수 있는 가장 범용적인 매개변수화 Set타입이다.

비한정적 와일드카드 타입 – set<?>은 안전
로 타입 		 - Set은 안전X
public class TypeTest {
    private static void addtoObjList(final List<Object> list, final Object o) {
        list.add(o);
    }
    private static void addToWildList(final List<?> list, final Object o) {
list.add(o);
    }
    private static <T> void addToGenericList(final List<T> list, final T o) {
        list.add(o);
    }

    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        String s = "kimtaeng";    
        // List<Object> 이므로 incompatible types 오류
        addtoObjList(list, s);
// 아무 타입이나 Okay! 하지만 메서드에서 오류
        addToWildList(list, s);
        // Okay!
        addToGenericList(list, s);
    }
}
public class TypeTest2 {
    public static void main(String[] args) {
        List raw = new ArrayList<String>(); // Okay!
        List<?> wildcard = new ArrayList<String>(); // Okay!
        List<Object> generic = new ArrayList<String>(); // 컴파일 오류
            
        raw.add("Hello"); // Okay! 하지만 raw타입은~
        wildcard.add("Hello"); // 제네릭 타입 매개변수에 의존성이 있는데, <?>는 타입을 알지 못하므로 컴파일에 실패한다. 타입안정성이 있는 셈

        wildcard.size(); // Okay! 제네릭 타입에 의존성 없음
        wildcard.clear(); // Okay! 제네릭 타입에 의존성 없음
    }
}
<?>는 제네릭 타입 매개변수에 의존성이 있는 코드가 있다면 컴파일러가 실패처리한다.

raw type을 쓰는 예외
	class 리터럴은 raw type으로 써야한다.
자바명세는 class리터럴에 매개변수화 타입을 사용하지 못하게 했다.
List.class 는 되지만, List<String>.class 은 허용되지 않는다.
	instanceof 연산자는 런타임에서 타입을 비교한다. 제네릭 타입은 런타임에서 소거되므로 제네릭 타입으로 비교할 수 없다.
// o의 타입이 Set인지 확인한 다음, 와일드카드 타입으로 형변환해야 합니다.
// 여기서 로 타입인 Set이 아닌 와일드카드 타입으로 변환함에 주의!
if( o instanceof Set) { //로타입
  	  Set<?> s = (Set<?>) o; //와일드 카드 타입
}

