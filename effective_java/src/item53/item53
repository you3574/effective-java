아이템53. 가변인수는 신중히 사용하라
가변인수?
필요에 따라 매개변수(인수)를 가변적으로 조정할 수 있는 기술.
명시한 타입의 인수를 0개 이상 받을 수 있다.
//가변인수 활용 예 (320-321쪽)
public class Varargs {
 // 코드 53-1 간단한 가변인수 활용 예 (320쪽)
 static int sum(int... args) {
     int sum = 0;
     for (int arg : args)
         sum += arg;
     return sum;
 }

 public static void main(String[] args) {

     System.out.println(sum());
     System.out.println(sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
 }
}

가령, 꼭 인수가 1개 이상이어야 할 때도 있다. 

public class Min {


 // 코드 53-2 인수가 1개 이상이어야 하는 가변인수 메서드 - 잘못 구현한 예! (320쪽)
 static int min(int... args) {
     if (args.length == 0)
         throw new IllegalArgumentException("인수가 1개 이상 필요합니다.");
     int min = args[0];
     for (int i = 1; i < args.length; i++)
         if (args[i] < min)
             min = args[i];
     return min;
 }


 public static void main(String[] args) {
     
     System.out.println(min(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
     System.out.println(min());
 }
}

최솟값을 찾는 메서드인데, 인수가 0개이면 에러를 발생한다.
그래서, 인수가 1개 이상이어야 할 때 제대로 사용하는 방법이 따로 있다.

// 코드 53-3 인수가 1개 이상이어야 할 때 가변인수를 제대로 사용하는 방법 (321쪽)
 static int min(int firstArg, int... remainingArgs) {
     int min = firstArg;
     for (int arg : remainingArgs)
         if (arg < min)
             min = arg;
     return min;
 }


매개변수를 2개 받도록 하면 앞선 문제가 사라진다.

성능이 민감한 경우에는 가변인수가 걸림돌이 될 수 있다. 가변인수 메서드는 호출될 때마다 배열을 새로 하나 할당하고 초기화하기 때문이다! 그래서 가변인수의 유연성이 필요할 때 선택할 수 있는 멋진 패턴은 ^^..

public void foo(){}

public void foo(int a1){}

public void foo(int a1, int a2){}

public void foo(int a1, int a2, int a3){}

public void foo(int a1, int a2, int a3, int... rest){}

자주 호출되는 것 외에 것을 가변인수로 만들어 주는 것 ^^
