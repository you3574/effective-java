아이템55.옵셔널 반환은 신중히 하라
Java Optional 클래스는 java 8에서 추가되었으며, 자바의 고직적인 문제인 NullpointerException문제를 해결할 수 있는 방법을 제공한다.
import java.util.Optional;

만약, 주인 없는 집이 있다면?
public class Person {
	private String name;
}

public class House {
	private Person onwer;
	private String address;
}
void main() {
	House house = houseService.getRandomHouse();
	System.out.println("onwer: " + house.getOnwer().getName
()); // java.lang.NullPointerException 발생!
	System.out.println("address: " + house.getAddress());
}
콘솔에 노출하려고 할 때 NPE 예외가 일어나서 프로그램이 제대로 수행되지 않는다.

void main() {
	House house = houseService.getRandomHouse();
	if (house.getOnwer() != null && house.getOnwer().getName() != null) {
		System.out.println("onwer: " + house.getOnwer().getName());
	}
	if (house.getAddress() != null) {
		System.out.println("address: " + house.getAddress());
	}
} -> 예외시, 콘솔에 노출되지 않게 해줌.


if문의 사용없이 optional 사용 시
void main() {
	House house = houseService.getRandomHouse();
	Optional.of(house) //값이 든 옵셔널 반환
        .map(House::getOnwer)
        .map(Person::getName)
        .ifPresent(name -> System.out.println("onwer:" + name));

	Optional.of(house)
        .map(House::getAdress)
        .ifPresent(address -> System.out.println("address:" + address));
}

콘솔에 노출하지 않는 것 보다, 주인이 없으면 “없음”, 주소도 없으면 “발급 되지 않음”이라고 나오게 하는 방법
void main() {
	House house = houseService.getRandomHouse();
	String onwerName = Optional.of(house).map(House::getOnwer).map(Person::getName).orElse("없음");
	String address = Optional.of(house).map(House::getAdress).orElse("발급 되지 않음");

	System.out.println("onwer:" + onwerName);
	System.out.println("address:" + address);
}

자바8
Optional.empty() -> 빈 옵셔널
Optional.of(value) -> 값이 든 옵셔널. Null을 넣으면 NPE던지니 주의
Optional.ofNullable(value) ->null값도 허용하는 옵셔널
Optional.~~~.orElse(“default”); ->최종적으로 연산을 끝낸 후, 옵셔널 객체가 비어있다면 기본값으로 제공할 객체 지정
Optional.~~~.orElseThrow(NoSuchElementException::new); ->최종적으로 연산을 끝낸 후에도 옵셔널 객체가 비어있다면 예외 공급자 함수를 통해 예외를 발생시킴.
Optional.~~~.get() -> 최종적으로 연산을 끝낸 후 객체를 꺼냄. 비어있으면 에외발생.

자바9
StreamOfOptional.flatMap(Optional::stream) ->옵셔널에 값이 있으면 그 값을 원소로 담은 스트림으로, 값이 없다면 빈 스트림으로 변환.

반환값으로 옵셔널을 사용한다고 해서 무조건 득이 되는 건 아니다. 컬렉션, 스트림, 배열, 옵셔널 같은 컨테이너 타입은 옵셔널로 감싸면 안 된다.
그럼 어떤 경우에 반환 타입을 T대신 Optional<T>로 선언해야 할까?
	결과가 없을 수 있으며, 클라이언트가 이 상황을 특별하게 처리해야 한다고 Optional<T>를 반환한다.
	박싱된 기본타입을 담은 옵셔널을 반환하는 일은 없도록 하자.


