아이템15. 클래스와 멤버의 접근 권한을 최소화하라.
잘 설계된 컴포넌트는 클래스는 모든 내부구현을 완벽히 숨겨, 구현과 API를 깔끔하게 분리 해놨다.
오직 API를 통해서만 다른 컴포넌트와 소통하며 서로의 내부 동작 방식에는 전혀 개의치 않는다.
정보은닉, 혹은 캡슐화라고 하는 이 개념은 소프트웨어 설계의 근간이 되는 원리다.

정보은닉의 장점
•	시스템 개발 속도를 높인다.
•	시스템 관리 비용을 낮춘다.
•	성능 최적화에 도움을 준다.
•	소프트웨어 재사용을 높인다.
•	큰 시스템을 제작하는 난이도를 낮춘다.


기본원칙
1.	모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다.
접근 제어자	설명
public	어떤 클래스라도 접근이 가능하다.
protected	동일 패키지 내에 있는 클래스와 하위 클래스에서만 가능하다
default (package private)	동일 패키지에서만 접근이 가능하다. 접근제어자를 별도로 설정하지 않는다면 default가 접근 제어자가 된다.
private	클래스 내에서만 접근이 가능하다.

	소프트웨어가 올바로 동작하는 한 항상 가장 낮은 접근 수준을 부여해야 한다.
	메서드를 재정의 할 경우 접근 수준을 상위 클래스 보다 좁게 설정할 수 없다.
	상위클래스에서 접근제한자가 protected인데 하위클래스에서 갑자기 package-private이나 private로 변경할 수 없다.
	상위클래스의 인스턴스는 하위 클래스의 인스턴스로 대체해 사용할 수 있어야 한다는 규칙(리스코프 치환원칙)을 위반하기 때문이다.

	이너클래스 사용
public class Food {
  private String name;
  private int price;
  private List<Shop> shops;
}
public class Shop {
  private String name;
  private String owner;
}

public class Food {
  private String name;
  private int price;
  private List<Shop> shops;

  private static class Shop {
    private String name;
    private String owner;
  }
} //다른 패키지에서 사용하지 못함.
	톱레벨 수준(파일명 = 클래스명)이 같은 수준에서의 접근제한자는 public과 package-private만 사용 할 수 있다.
	public으로 선언하는 경우 공개 API로 사용 - 하위호환을 평생 신경써야 한다. 패키지 외부 사용
	package-private로 사용하는 경우 해당 패키지 안에서만 사용 가능 - 다음 릴리즈에 내부로직을 변경해도 괜찮다. 패키지 외부 사용x


2.	public클래스의 인스턴스 필드는 되도록 public이 아니어야 한다.
필드가 가변객체를 참조하거나(Collections이나 배열), final이 아닌 인스턴스 필드를 public으로 선언하면 불변식을 보장할 수 없다. -> public 가변 필드를 갖는 클래스는 일반적으로 thread safe 하지 않다.

3.	클래스에서 public static final 배열 필드를 두지 마라.
//values에 대한 참조를 변경할 수는 없지만, 배열내의 내용을 변경하는 것은 가능.
public static final Thing[] VALUES = {...};
해결책
	thing배열을 private로 만들고 public 불변 리스트를 추가한다.
private static final Thing[] PRIVATE_VALUES = {...};
public static final List<Thing> VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));

	배열을 private으로 만들고 그 복사본을 반환하는 public메서드를 추가(방어적복사).
private static final Thing[] PRIVATE_VALUES = {...};
public static final Thing[] values() {
  return PRIVATE_VALUES.clone(); //방어적 복사본
}
