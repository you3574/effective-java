아이템37. ordinal인덱싱 대신 EnumMap을 사용하라
ordinal() 메소드는 해당 열거체 상수가 열거체 정의에서 정의된 순서(0부터 시작)를 반환한다..

package item37;

import java.util.*;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toSet;

// EnumMap을 사용해 열거 타입에 데이터를 연관시키기 (226-228쪽)

// 식물을 아주 단순하게 표현한 클래스 (226쪽)
class Plant {
    enum LifeCycle {ANNUAL, PERENNIAL, BIENNIAL}

    final String name;
    final LifeCycle lifeCycle;

    Plant(String name, LifeCycle lifeCycle) {
        this.name = name;
        this.lifeCycle = lifeCycle;
    }

    @Override
    public String toString() {
        return name;
    }

    public static void main(String[] args) {
        Plant[] garden = {
                new Plant("바질", LifeCycle.ANNUAL),
                new Plant("캐러웨이", LifeCycle.BIENNIAL),
                new Plant("딜", LifeCycle.ANNUAL),
                new Plant("라벤더", LifeCycle.PERENNIAL),
                new Plant("파슬리", LifeCycle.BIENNIAL),
                new Plant("로즈마리", LifeCycle.PERENNIAL)
        };

        // 코드 37-1 ordinal()을 배열 인덱스로 사용 - 따라 하지 말 것! (226쪽)
        // 배열은 제네릭과 호환되지 않는다. (비검사 형변환이 수행, 컴파일이 안된다.)
        // ordinal()은 상수 선언 순서에 따라 변한다.
        // 잘못된 값을 사용하면 이상한 동작을 유발한다.
        Set<Plant>[] plantsByLifeCycleArr =
                (Set<Plant>[]) new Set[Plant.LifeCycle.values().length];
        for (int i = 0; i < plantsByLifeCycleArr.length; i++)
            plantsByLifeCycleArr[i] = new HashSet<>();
        for (Plant p : garden)
            plantsByLifeCycleArr[p.lifeCycle.ordinal()].add(p);
        // 결과 출력
        for (int i = 0; i < plantsByLifeCycleArr.length; i++) {
            System.out.printf("%s: %s%n",
                    Plant.LifeCycle.values()[i], plantsByLifeCycleArr[i]);
        }

    }
}
결과
ANNUAL: [딜, 바질]
PERENNIAL: [로즈마리, 라벤더]
BIENNIAL: [파슬리, 캐러웨이]

EnumMap을 사용해 매핑
package item37;
import java.util.*;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toSet;

// EnumMap을 사용해 열거 타입에 데이터를 연관시키기 (226-228쪽)

// 식물을 아주 단순하게 표현한 클래스 (226쪽)
class Plant2 {
    enum LifeCycle {ANNUAL, PERENNIAL, BIENNIAL}

    final String name;
    final LifeCycle lifeCycle;

    Plant2(String name, LifeCycle lifeCycle) {
        this.name = name;
        this.lifeCycle = lifeCycle;
    }

    @Override
    public String toString() {
        return name;
    }

    public static void main(String[] args) {
        Plant2[] garden = {
                new Plant2("바질", LifeCycle.ANNUAL),
                new Plant2("캐러웨이", LifeCycle.BIENNIAL),
                new Plant2("딜", LifeCycle.ANNUAL),
                new Plant2("라벤더", LifeCycle.PERENNIAL),
                new Plant2("파슬리", LifeCycle.BIENNIAL),
                new Plant2("로즈마리", LifeCycle.PERENNIAL)
        };

        // 코드 37-2 EnumMap을 사용해 데이터와 열거 타입을 매핑한다. (227쪽)
        // 더 간단명료하게 로직 변환
        // 맵의 키인 열거 타입이 그 자체로 출력용 문자열을 제공하니 출력결과에 별도의 formatting이 필요없다.
        // EnumMap의 성능이 ordinal을 쓴 배열과 같은 이유는 EnumMap 내부에서 ordinal을 사용한 배열을 사용하기 때문이다.
        // 개발자가 직접 제어하지 않고 Map을 사용하여, 타입안정성을 얻을 뿐더러 성능상의 이점까지 그대로 가져간다.
        Map<Plant2.LifeCycle, Set<Plant2>> plantsByLifeCycle =
                new EnumMap<>(Plant2.LifeCycle.class);
        for (Plant2.LifeCycle lc : Plant2.LifeCycle.values())
            plantsByLifeCycle.put(lc, new HashSet<>());
        for (Plant2 p : garden)
            plantsByLifeCycle.get(p.lifeCycle).add(p);
        System.out.println(plantsByLifeCycle);

    }
}
결과
{ANNUAL=[바질, 딜], PERENNIAL=[로즈마리, 라벤더], BIENNIAL=[캐러웨이, 파슬리]}

Stream을 이용한 코드
package item37;

import java.util.*;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toSet;

// EnumMap을 사용해 열거 타입에 데이터를 연관시키기 (226-228쪽)

// 식물을 아주 단순하게 표현한 클래스 (226쪽)
class Plant3 {
    enum LifeCycle {ANNUAL, PERENNIAL, BIENNIAL}

    final String name;
    final LifeCycle lifeCycle;

    Plant3(String name, LifeCycle lifeCycle) {
        this.name = name;
        this.lifeCycle = lifeCycle;
    }

    @Override
    public String toString() {
        return name;
    }

    public static void main(String[] args) {
        Plant3[] garden = {
                new Plant3("바질", LifeCycle.ANNUAL),
                new Plant3("캐러웨이", LifeCycle.BIENNIAL),
                new Plant3("딜", LifeCycle.ANNUAL),
                new Plant3("라벤더", LifeCycle.PERENNIAL),
                new Plant3("파슬리", LifeCycle.BIENNIAL),
                new Plant3("로즈마리", LifeCycle.PERENNIAL)
        };


        // 코드 37-3 스트림을 사용한 코드 1 - EnumMap을 사용하지 않는다! (228쪽)
        System.out.println(Arrays.stream(garden)
                .collect(groupingBy(p -> p.lifeCycle)));

        // 코드 37-4 스트림을 사용한 코드 2 - EnumMap을 이용해 데이터와 열거 타입을 매핑했다. (228쪽)
        System.out.println(Arrays.stream(garden)
                .collect(groupingBy(p -> p.lifeCycle,
                        () -> new EnumMap<>(LifeCycle.class), toSet())));
    }
}

{ANNUAL=[바질, 딜], PERENNIAL=[라벤더, 로즈마리], BIENNIAL=[캐러웨이, 파슬리]}
{ANNUAL=[딜, 바질], PERENNIAL=[로즈마리, 라벤더], BIENNIAL=[파슬리, 캐러웨이]}

스트림을 사용하면 EnumMap만 사용했을 때와는 살짝 다르게 동작한다.
EnumMap 버전은 언제나 식물의 생애주기당 하나씩 중첩 맵을 만들지만,
스트림 버전에서는 해당 생애주기에 속하는 식물이 있을 때만 만든다.
만약, 정원에 한해살이와 여러해살이 식물만 살고 두해살이는 없다면, EnumMap버전에서는 맵을 3개 만들고 스트림 버전에서는 2개만 만든다.

추가예제
두 가지 상태(Phase)를 전이(Transition)와 매핑하도록 구현한 프로그램
ordinal()을 배열의 인덱스로 사용한 예
package item37;

public enum Phase {
    SOLID, LIQUID, GAS;

    public enum Transition {
        MELT, FREEZE, BOIL, CONDENSE, SUBLIME, DEPOSIT;
        
        // 행은 from의 ordinal을, 열은 to의 ordinal을 인덱스로 사용
        private static final Transition[][] TRANSITIONS = {
            { null, MELT, SUBLIME },
            { FREEZE, null, BOIL },
            { DEPOSIT, CONDENSE, null }
        };
        
        // 한 상태에서 다른 상태로의 전이를 반환한다.
        public static Transition from(Phase from, Phase to) {
            return TRANSITIONS[from.ordinal()][to.ordinal()];
        }
    }
}
이 예제는 SOLID, LIQUID, GAS의 상태 변화(from~to)에 대한 배열로 맵을 만든 것이다.
이렇게 되면 Phase가 추가 될 때마다 배열을 수정해줘야 하는 불상사가 발생한다. 만약 수정하지 않거나 실수로 잘못 수정하면 런타임 오류가 날 것이다. 그리고 상태의 가짓수가 늘어나면 제곱해서 커지며 null로 채워지는 칸도 늘어날 것이다.

EnumMap을 이용
package item37;

// 코드 37-6 중첩 EnumMap으로 데이터와 열거 타입 쌍을 연결했다. (229-231쪽)
public enum EnumMapPhase {
    SOLID, LIQUID, GAS;

    public enum Transition {

        MELT(SOLID, LIQUID), FREEZE(LIQUID, SOLID),
        BOIL(LIQUID, GAS), CONDENSE(GAS, LIQUID),
        SUBLIME(SOLID, GAS), DEPOSIT(GAS, SOLID);

        private final EnumMapPhase from;
        private final EnumMapPhase to;

        Transition(EnumMapPhase from, EnumMapPhase to) {
            this.from = from;
            this.to = to;
        }

        // 상전이 맵을 초기화한다.
	// 이전 상태에서 ‘이후 상태에서 전이로의 맵’에 대응시키는 맵.
	// 첫 번째 수집기인 groupingBy에서는 전이 이전 상태를 기준으로 묶고
	// 두 번째 수집기인 toMap에서는 이 후 상태를 전이에 대응시키는 EnumMap을 생성한다.
        private static final Map<EnumMapPhase, Map<EnumMapPhase, Transition>>
                m = Stream.of(values()).collect(groupingBy(t -> t.from,
                () -> new EnumMap<>(EnumMapPhase.class),
                toMap(t -> t.to, //key-mapper
t -> t, //value-mapper
                        (x, y) -> y,//merge-function
() -> new EnumMap<>(EnumMapPhase.class))));
1.		일단 from으로 grouping 하여 EnumMap을 하나 생성
2.	toMap으로 하위 Map을 생성
3.	첫 번째 인자는 Map의 key를 설정하는 Function이다. - Phase to로 선언
4.	두 번째 인자는 Map의 value를 설정하는 Function이다. - 자기 자신을 참조
5.	세 번째 인자는 merge-function이다. - 얘는 별 의미없다.
6.	네 번째 인자는 EnumMap으로 내부 Map을 선언한다.
따라서 from 메서드에서 Phase별 from~to에 대해 Map -> Map에 접근하여 Transition을 리턴 할 수 있다.


        public static Transition from(EnumMapPhase from, EnumMapPhase to) {
            return m.get(from).get(to);
        }


    }

    // 간단한 데모 프로그램 - 깔끔하지 못한 표를 출력한다.
    public static void main(String[] args) {
        for (EnumMapPhase src : EnumMapPhase.values()) {
            for (EnumMapPhase dst : EnumMapPhase.values()) {
                Transition transition = Transition.from(src, dst);
                if (transition != null)
                    System.out.printf("%s에서 %s로 : %s %n", src, dst, transition);
            }
        }
    }
}
SOLID에서 LIQUID로 : MELT 
SOLID에서 GAS로 : SUBLIME 
LIQUID에서 SOLID로 : FREEZE 
LIQUID에서 GAS로 : BOIL 
GAS에서 SOLID로 : DEPOSIT 
GAS에서 LIQUID로 : CONDENSE 

새로운 Phase가 추가되는 경우
public enum Phase {

    SOLID, LIQUID, GAS, PLASMA;

    public enum Transition {
        MELT(SOLID, LIQUID),
        FREEZE(LIQUID, SOLID),
        BOIL(LIQUID, GAS),
        CONDENSE(GAS, SOLID),
        SUBLIME(SOLID, GAS),
        DEPOSIT(GAS, SOLID),
        IONIZE(GAS, PLASMA),
        DEIONIZE(PLASMA, GAS);

        private final Phase from;
        private final Phase to;

상태와 전이만 추가하면 된다.

맵들의 맵이 배열들의 배열로 구현되니 낭비되는 공간과 시간도 거의 없이 명확하고 안전하고 유지보수하기 좋다.

결론
배열의 인덱스를 얻기 위해 ordinal을 쓰는 것은 일반적으로 좋지 않으니, 대신 EnumMap을 사용하라.
