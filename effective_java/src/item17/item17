변경 가능성을 최소화하라
불변 클래스란 인스턴스의 내부 값을 수정할 수 없는 클래스를 말한다. 객체가 소멸되기 전까지 절대로 달라지지 않는다. 불변 클래스는 가변 클래스보다 설계하고 구현하고 사용하기 쉬우며 오류가 발생한 소지도 적고 훨씬 안전하다. 예로는 String, 기본 타입의 박싱된 클래스들, BigInteger, BigDecimal이 속한다. 
불변 클래스를 만드는 규칙
•	객체의 상태를 변경하는 메서드(변경자)를 제공하지 않는다.
•	클래스를 확장할 수 없도록 한다.
o	하위 클래스에서 객체의 상태를 변하게 하는 것을 막는다. 대표적으로 클래스를 final로 선언하면 된다.
•	모든 필드를 final로 선언한다.
o	개발자의 의도를 명확하게 드러내는 방법이다.
•	모든 필드를 private으로 선언한다.
o	필드가 참조하는 가변 객체를 직접 접근하는 일을 막는다.
•	자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.

불변 복소수 클래스
public final class Complex {
    private final double re;
    private final double im;

    public static final Complex ZERO = new Complex(0, 0);
    public static final Complex ONE  = new Complex(1, 0);
    public static final Complex I    = new Complex(0, 1);

    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }

    public double realPart()      { return re; }
    public double imaginaryPart() { return im; }

    public Complex plus(Complex c) {
        return new Complex(re + c.re, im + c.im);
    }

    public static Complex valueOf(double re, double im) {
        return new Complex(re, im);
    }

    public Complex minus(Complex c) {
        return new Complex(re - c.re, im - c.im);
    }

    public Complex times(Complex c) {
        return new Complex(re * c.re - im * c.im,
                re * c.im + im * c.re);
    }

    public Complex dividedBy(Complex c) {
        double tmp = c.re * c.re + c.im * c.im;
        return new Complex((re * c.re + im * c.im) / tmp,
                (im * c.re - re * c.im) / tmp);
    }

    @Override public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Complex))
            return false;
        Complex c = (Complex) o;

        return Double.compare(c.re, re) == 0
                && Double.compare(c.im, im) == 0;
    }

    @Override public int hashCode() {
        return 31 * Double.hashCode(re) + Double.hashCode(im);
    }

    @Override public String toString() {
        return "(" + re + " + " + im + "i)";
    }
}

Object의 메서드 재정의, 접근자 메서드 realPart와 imaginaryPart, 사칙연산 메서드 plus, minus, times, dividedBy정의.
사칙연산 메서드를 살펴보면 특이점이 있다. 인스턴스 자체를 수정하지 않고 새로운 인스턴스(new Complex)를 생성해서 반환한다. 이러한 프로그래밍 패턴을 “함수형 프로그래밍”이라한다. 
또한, 메서드 이름도 (add같은)동사가 아닌 (plus같은)전치사를 사용한다.

이러한 방식의 장점은 불변이 되는 비율이 높아진다는 것이다. 특정 메서드를 수행하더라도 인스턴스 자체의 값은 변경되지 않는다. 그리고 불변 객체가 다루기가 편하고 스레드에 안전하다.(불변객체 에서는 그 어떤 스레드도 다른 스레드에 영향을 줄 수 없으므로, 여러 스레드가 동시에 사용해도 절대 훼손되지 않는다.)


불변 클래스 단점
값을 나타내는 클래스를 주로 불변 클래스로 설계한다. 이 때, 각 값이 다르면 독립된 객체를 만드는 것이 단점이다. 값이 가짓수가 많으면 이들을 모두 생성하는데 큰 비용이 들기 때문이다. 

단점을 해결한 예)
BigInteger 클래스(무한대 정수)의 flipBit 메서드는 매번 새로운 BigInteger 인스턴스를 생성한다. 이러한 연산은 BigInteger의 크기에 비례해 시간과 공간을 모두 잡아 먹는다.
BigInteger moby = ...;
moby = moby.flipBit(0);
반면에 BitSet은 BigInteger와 달리 가변 클래스이다. 따라서 원하는 비트를 빠르게 바꿔주는 메서드를 제공한다.
BitSet moby = ...;
moby.flip(0);

원하는 객체를 완성하기까지의 단계가 많고, 그 중간단계에서 만들어진 객체들이 모두 버려진다면 성능 문제가 더 불거진다. 다단계 연산을 기본으로 제공한다면 더 이상 각 단계마다 객체를 생성하지 않아도 된다. BigInteger는 다단계 연산 속도를 높여주는 가변 동반 클래스를 package-private으로 두고 있다. 그리고 BigInteger가 대신 처리해주어 사용하는데 어렵지 않다.
String 가변동반 클래스? – StringBuilder
String 클래스는 불변 객체이기 때문에 문자열 연산이 많은 프로그래밍이 필요할 때 계속해서 인스턴스를 생성하므로 성능이 떨어지지만 조회가 많은 환경, 멀티쓰레드 환경에서 성능적으로 유리.
StringBuffer 클래스와 StringBuilder 클래스는 문자열 연산이 자주 발생할 때 문자열이 변경가능한 객체기 때문에 성능적으로 유리.

불변 클래스를 만드는 또 다른 방법
생성자 대신에 정적 팩터리를 이용하여 불변 클래스를 만들 수 있다.
public class Complex {
    // 클래스에 final이 없다.

    private final double realNumber; // 실수부
    private final double imaginaryNumber; // 허수부

    // 생성자가 private
    private Complex(double realNumber, double imaginaryNumber) {
        this.realNumber = realNumber;
        this.imaginaryNumber = imaginaryNumber;
    }

    public static Complex valueOf(double re, double im) {
        return new Complex(re, im);
    }

    // ...생략
}
생성자가 private이므로 클라이언트에서 바라본 이 불변 객체는 사실상 final 이다. (public이나 protected생성자가 없어 다른 패키지에서는 이 클래스를 확장하는게 불가능.) 이러한 정적 팩터리 방식은 다수의 구현 클래스를 활용한 유연성을 제공하고 객체 캐싱과 같은 기능을 추가하여 성능을 끌어올릴 수도 있다.

정리
1.	클래스는 특정 예외 상황을 제외하고 되도록이면 불변이어야 한다.
2.	불변으로 만들 수 없는 클래스라도 변경 가능한 범위는 최소한으로 줄이자.
3.	다른 이유가 없다면 모든 필드는 private final로 선언하자.
4.	생성자는 불변식 설정이 완료되고, 초기화가 완벽히 끝난 상태에서 호출(객체 생성)을 해야 한다.


