아이템 8. finalizer와 cleaner 사용을 피하라.
자바의 객체 소멸자: finalizer(자바 9 부터 deprecated), cleaner(자바 9)  
finalize 메서드란
자바의 모든 클래스는 최상위 클래스인 Object 클래스의 여러 메서드를 포함하고 있는데, 객체 소멸자라고 말하는 finalize 메서드도 그 메서드들 중 하나이다. 리소스 누수(leak)를 방지하기 위해 자바 가상 머신(Java Virtual Machine)이 실행하는 가비지 컬렉션이 수행될 때 더 이상 사용하지 않는 자원에 대한 정리 작업을 진행하기 위해 호출되는 종료자 메서드이다.
finalizer는 예측할 수 없고, 상황에 따라 위험할 수 있어 일반적으로 불필요
(오동작, 낮은 성능, 이식성 문제의 원인이 되기도 함)
자바9에서는 finalizer를 사용 자제 API로 지정하고 cleaner를 그 대안으로 소개
cleaner는 finalizer보다는 덜 위험하지만, 여전히 예측할 수 없고, 느리고, 일반적으로 불필요

사용하지 말아야 할 이유
문제점1
finalizer와 cleaner는 즉시 수행된다는 보장이 없다. 객체에 접근할 수 없게 된 후 finalizer나 cleaner가 실행되기까지 얼마나 걸릴지 알 수 없다. 또한, 자바 언어 명세는 finalizer나 cleaner의 수행 시점뿐 아니라 수행 여부조차 보장하지 않는다.
EX) 파일 닫기를 finalizer나 cleaner에 맡기면 중대한 오류를 일으킬 수 있다. 시스템이 동시에 열 수 있는 파일 개수에 한계가 있고 finalizer나 cleaner가 실행을 게을리해서 파일을 계속 열어 둔다면 새로운 파일을 열지 못해 프로그램이 실패할 수 있다.
상태를 영구적으로 수정하는 작업에서는 절대 finalizer나 cleaner에 의존해서는 안 된다
 System.gc, System.runFinalization 으로 GC 실행의 가능성을 높여줄 수 는 있지만 보장하진 않는다. 이를 보장해주겠다는 메소드 System.runFinalizersOnExit와 Runtime.runFinalizersOnExit는 심각한 결함이 있다(ThreadStop)
문제점2
finalizer 동작 중 예외가 발생하면 마무리가 덜 된 상태로 종료될 수 있다.
문제점3
Finalizer는 가비지 컬렉터의 효율을 떨어뜨린다. 간단한 객체를 생성하고 가비지 컬렉터가 수거하기까지 12ns가 걸리는 반면 finalizer를 사용하면 550ns가 걸려 50배 가까이 느려진다.
Cleaner 또한 모든 인스턴스를 수거하는 형태로 사용하면 finalizer와 비슷하다 (하지만 안전망 형태로만 사용하면 훨씬 빨라짐).

문제점4
Finalizer를 사용한 클래스는 finalizer 공격에 노출되어 심각한 보안 문제를 일으킬 수도 있다.
  A 를 상속받는 B 클래스의 생성자 또는 직렬화 과정에서 exception 을 던지게하고 악의적인 행위를 하는 finalizer 메서드를 구현해놓는다고 하면, B 생성 시 exception 이 발생하면 finalizer 가 수행되고 오버라이드된 악의적인 로직을 수행한다. 이 finalizer 를 참조하는 정적 필드를 만들면서 gc 대상이 되지 못하도록 할 수도 있다. 
해결방법: Final 클래스를 만들어 상속이 불가하게하거나 아무것도 하지 않는 finalize 메서드를 오버라이딩하고 final 키워드를 사용하여 상속되지 않도록 한다. 

finalizer나 cleaner를 대신할 수 있는 것
AutoCloseable을 구현해주고, 클라이언트에서 인스턴스를 다 쓰고 나면 close 메서드를 호출하면 된다. 
*AutoCloseable 인터페이스에는 close() 메서드가 있고 이를 구현한 클래스는 close()를 명시적으로 호출하지 않아도 close()메서드 부분이 호출됨 (FileInputStream은 AutoCloseable 인터페이스를 구현하고 있음)

Finalizer와 cleaner 적절하게 쓰이는 경우
1.	try - with - resources 를 사용하지 않을 시를 대비하여 "안전망" 정도로
2.	네이티브 피어(native peer)와 연결된 객체
자바 객체가 아니므로 가비지 컬렉터가 관리하는 대상이 아니기 때문입니다. finalizer를 명시적으로 호출함으로 자원을 회수할 수 있다.
