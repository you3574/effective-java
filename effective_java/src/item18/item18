상속보다는 컴포지션을 사용하라
*여기서 말하는 상속은 ‘클래스가 다른 클래스를 확장하는 구현상속’을 말함. 인터페이스 상속x

상속은 코드를 재사용할 수 있는 강력한 수단이지만, 항상 최선이라고 할 수는 없다. 메서드 호출과 다르게 캡슐화를 깨드리기 때문이다. 상위 클래스의 구현이 바뀌면 이를 상속한 하위 클래스에도 영향이 있을 수 있기 때문이다.

*상속의 단점 상세이유
상속은 캡슐화 ( encapsulation ) 을 위배합니다. 올바른 동작을 위해 서브 클래스는 자신의 수퍼 클래스가 구현하는 상세 내역에 의존하게 되는데요, 이 때 수퍼 클래스의 구현 내용은 소프트웨어 배포판이 바뀌면서 변경될 수 있습니다. 이렇게 되면 서브 클래스의 코드를 그냥 사용하게 되면 제대로 동작하지 않을 가능성이 높으며, 수퍼클래스의 변화를 항상 감지하고, 맞춰 진화해야 합니다.

- 차후 배포판에서 수퍼 클래스에 새로운 메소드가 추가되면 서브 클래스가 허약하게 되는 원인이 될 수 있습니다. 추후 배포판의 수퍼 클래스에 새 메소드를 추가할 때 그 메소드와 signature 는 동일하고, return type 이 다른 메소드의 함수가 서브 클래스에 이미 있다면, 잘못된 오버라이딩으로 서브 클래스에서 컴파일 에러가 생깁니다. 반대로, 서브 클래스의 새 함수와 같은 signature 와 return type 을 가진 함수를 수퍼클래스에서 정의한다면, 잘못된 오버라이딩을 한 셈이 됩니다.

- 클래스의 내부 구현을 쓸데 없이 노출시킬수도 있습니다. 그렇게 되면, 외부 API 와 내부 구현이 밀접하게 연계되어 클래스의 성능을 제한하게 되지요. 심각하게는 클라이언트가 내부 메소드나 필드를 직접 접근할 수도 있다는 것입니다. ( 잘못된 설계와 구현일수록 더욱 심각해집니다. ) 더 심각한 것은, 클라이언트가 수퍼 클래스를 직접 수정하여 서브 클래스의 불변성을 저해할 수 있습니다. 

HashSet을 확장한 MyHashSet 클래스 예 
public class MyHashSet<E> extends HashSet<E> {
    private int addCount = 0; // 추가된 원소의 개수

    @Override
    public boolean add(E e) {
        addCount++;
        return super.add(e);
    }

    @Override
    public boolean addAll(Collection<? extends E> c) {
        addCount = addCount + c.size(); //3
        return super.addAll(c); //hashSet의 addAll구현 호출.
    }

    public int getAddCount() {
        return addCount;
    }
}

// 객체 생성 후 3개의 엘리먼트를 addAll 메서드로 추가
MyHashSet<String> mySet = new MyHashSet<>();
mySet.addAll(List.of("탱1","탱2","탱3"));

// 출력되는 값은?
System.out.println(mySet.getAddCount());

위의 코드를 실행하면? addCount의 값이 3이 나올 것으로 기대했지만 실제로는 6이 반환된다. 원인은 바로 HashSet의 addAll 메서드가 add 메서드를 사용하여 구현되었기 때문이다.
HashSet의 addAll은 각 원소를 add메서드를 호출해 추가하는데, 이 때 불리는 add는 InstrukejtedHashSet에서 재정의한 메서드.

// HashSet(AbstractSet)의 addAll 메서드
public boolean addAll(Collection<? extends E> c) {
    boolean modified = false;
    for (E e : c)
        if (add(e))
            modified = true;
    return modified;
}
addCount에 값이 중복해서 더해져, 최종값이 6으로 늘어나게 된다. addAll로 후가한 원소 하나당 2씩 늘어났다.
그러니까 addAll 메서드에는 각 요소를 add 메서드를 호출해서 추가하므로 addCount를 증가시키는 코드가 없어야 합니다.

이 문제를 해결하기 위한 방법. (상속x)
기존 클래스를 확장하는 대신에 새로운 클래스를 만들고 private 필드로 기존 클래스의 인스턴스를 참조하게 하면 된다. 기존 클래스가 새로운 클래스의 구성요소로 쓰인다는 뜻에서 이를 컴포지션(Composition)이라고 한다.
새로운 클래스의 인스턴스 메서드들은 기존클래스에 대응하는 메서드를 호출해 그 결과를 반환한다. 이를 전달(Forwarding)이라고 하며, 새 클래스의 메서드들은 전달 메서드라고 한다.
이렇게 되면 새로운 클래스는 기존 클래스의 영향이 적어지고 기존 클래스 안에 새로운 메서드가 추가되어도 안전하게 된다. 
위의 예제를 컴포지션과 전달 방식으로 변경한 예
public class MySet<E> extends ForwardingSet<E>  {
    private int addCount = 0;

    public MySet(Set<E> set) {
        super(set);
    }

    @Override
    public boolean add(E e) {
        addCount++;
        return super.add(e);
    }

    @Override
    public boolean addAll(Collection<? extends E> collection) {
        addCount = addCount + collection.size();
        return super.addAll(collection);
    }

    public int getAddCount() {
        return addCount;
    }
}

public class ForwardingSet<E> implements Set<E> {
    private final Set<E> set;
    public ForwardingSet(Set<E> set) { this.set = set; }
    public void clear() { set.clear(); }
    public boolean isEmpty() { return set.isEmpbty(); }
    public boolean add(E e) { return set.add(e); }
    public boolean addAll(Collection<? extends E> c) { return set.addAll(c); }
    // ... 생략
}
다른 Set 인스턴스를 감싸고 있다는 뜻에서 MySet과 같은 클래스를 래퍼 클래스라고 하며 다른 Set에 계측 기능을 덧씌운다는 뜻에서 데코레이터 패턴(Decorator Pattern)이라고 한다. 컴포지션과 전달의 조합은 넓은 의미로 위임(delegation)이라고 하지만 엄밀히 따지면 래퍼 객체가 내부 객체에 자기 자신의 참조를 넘기는 경우에만 해당된다.
임의의 set에 계측 기능을 덧씌워 새로운 Set으로 만드는 것이 이 클래스의 핵심.

그럼 언제 상속을 해야할까요?
클래스가 B가 클래스 A와 is-a 관계일때만 사용해야 한다. 반드시 하위 클래스가 상위 클래스의 진짜 하위 타입인 상황에서만 쓰여야 한다. 예를 들어 클래스 A를 상속하는 클래스 B를 만드려고 한다면, “B가 정말 A인가?” 를 생각해봐야 한다. 예를 들자면, 와인 클래스를 상속하는 레드 와인 클래스. 그리고 레드 와인은 와인입니다.
그 조건이 아니라면 A를 클래스 B의 private 인스턴스로 두면 된다. 그러니까, A는 B의 필수 구성요소가 아니라 구현하는 방법 중 하나일 뿐이다.
컴포지션을 사용해야 할 상황에서 상속을 사용하는 건 내부 구현을 불필요하게 노출하는 꼴이다. 

상속의 취약점을 피하려면 상속 대신 컴포지션과 전달을 사용해야한다. 특히, 래퍼 클래스로 구현할 적당한 인터페이스가 있다면 더욱 그렇다. 래퍼 클래스는 하위 클래스보다 견고하고 강력하다.


쉽게 설명한 예 -
햄버거,코크,프렌치프라이와  햄버거 세트
 
 새로운 형태의 클래스를 만들고자 할 때 기존의 만들어져 클래스를 이용하는 것이 아주
효율적 일때가 있습니다.
처음부터 새로 만드는 것보다 기존에 만들어진 클래스를 이용할 수 있다면 비용을
줄일수 있고 실수를 하지 않을 수 있기 때문입니다.
 
롯데리아에서 팔고 잇는 빅립버거, 코크, 프렌치프라이를 자바로 만들어 봤습니다.
빅립버거는 burger 패키지에, 코크는 beverage 패키지에,프렌치 프라이는 snack
패키지에 속하도록 했습니다. 적절한 이름이지요. 그쵸?
 
package burger;                
/**
* 롯데리아에서 파는 맛있는 BigRib버거
*/
public class BigRibBurger {
             private int price;
             private String description;
 
             public BigRibBurger(int price,String description) {
                           this.price = price;
                           this.description = description;
             }
             public BigRibBurger(int price) {
                           this(price,"best selling burger in 2002");
             }
             public BigRibBurger(String description) {
                           this(2500,description);
             }
             public BigRibBurger() {
                           this(2500,"best selling burger in 2002");
             }
             public int getPrice() {
                           return price;
             }
             public String getDescription() {
                           return description;
             }
}
예제 3 - 1 BigRibBurger.java
 
 
package beverage;                          // beverage 패키지
/**
* 롯데리아에서 파는 맛있는 코카코라
*/
public class Coke {
             private int price;   
             private String description;
             public Coke(int price, String description) {
                           this.price = price;
                           this.description = description;
             }
             public Coke(int price) {
                           this(price,"best selling beverage in 2002");
             }
             public Coke(String description) {
                           this(1100,description);
             }
             public Coke() {
                           this(1100,"best selling beverage in 2002");
             }
             public int getPrice() {
                           return price;
             }
             public String getDescription() {
                           return description;
             }
}
예제 3 - 2 Coke.java
 
 
package snack;                 // snack 패키지
/**
* 롯데리아에서 파는 맛있는 프렌치프라이
*/
public class FrenchFried {
             private int price;
             private String description;
             public FrenchFried(int price, String description) {
                           this.price = price;
                           this.description = description;
             }
             public FrenchFried(int price) {
                           this(price,"best selling snack in 2002");
             }
             public FrenchFried(String description) {
                           this(800,description);
             }
             public FrenchFried() {
                           this(800,"best selling snack in 2002");
             }
             public int getPrice() {
                           return price;
             }
             public String getDescription() {
                           return description;
             }
}
예제 3 - 3 FrenchFried.java
 
 
빅립버거, 코크, 프렌치프라이에 대한 개념을 구체화해서 객체로 잘 사용하고 있는데,
마침 회사에서 빅립버거세트 라는 것을 상품으로 내놓았습니다.
 
그런데 알고보니 빅립버거세트라는 것은 없다가 생긴개념이 아니라 빅립버거와 코크,
프렌치프라이를 한꺼번에 판매하는 개념이라고 합니다.
 이런 경우 처음부터 빅립버거세트에 대한 개념을 새로 만들어 클래스로 정의할 수
있겠지만 곰곰히 생각해보면 빅립버거세트는 다름아닌, 빅립버거와 코크,프렌치프라이를
합친 것에 다름 아닙니다.
빅립버거세트 클래스를 설계할 때 기존에 존재하는 다른 객체들,빅립버거,코크,프렌치]
프라이 등을 다시 사용한다면 처음부터 새롭게 만들지 않고도 효율적으로 설계를 할 수
있습니다.  빅립버거세트는 빅립버거,코크,프렌치프라이 객체로 구성되어 있기 때문입니다.
 
빅립버거,코크,프렌치프라이등의 객체의 멤버변수등이 가격과 개요등, int형, String형
으로 구성되어있다고해서 빅립버거세트의 멤버변수를 가격,개요 즉, int형,String형으로
구성할 필요는 없습니다.
좀더 간명하고 넓게 생각해 보면 빅립버거세트는 한 개의 빅립버거,한 개의 코크,한 개의
프렌치프라이로 구성되어 있다고 생각하는 것입니다.
물론 빅립버거세트 또한 가격이 있고,개요가 있겠지만 그렇게 생각하지 않고
빅립버거세트는 빅립버거,코크,프렌치프라이로 구성되어 있다고 생각하고 버거,코크,프렌치프라이등 기존에 존재하는 객체를 멤버변수로 이용해서 새로운 객체를 구현하는 방법을
콤포지션 (Composition) 이라고 합니다.
 
 콤포지션 예
package burger;                 // burger 패키지
import beverage.*; // beverage 패키지를 이용함
import snack.*;                   // snack 패키지를 이용함
/**
* 롯데리아에서 파는 맛있는 빅립버거세트
*/
 
public class BigRibBurgerSet {
             /**
             * 빅립버거세트의 빅립햄버거
             */
             private BigRibBurger burger;             
             /**
             * 빅립버거세트의 코카콜라
             */         
             private Coke coke;
             /**
             * 빅립버거세트의 프렌치프라이
             */
             private FrenchFried fried;
 
             /**
             * 빅립버거세트가 빅립버거,코크,프렌치프라이로 구성됩니다.
             */
             public BigRibBurgerSet(BigRibBurger burger,Coke coke,FrenchFried fried) {
                           this.burger = burger;
                           this.coke = coke;
                           this.fried = fried;
             }
             /**
             * 빅립버거세트의 가격은 빅립버거의 가격, 코크의 가격, 프렌치프라이의 가격을
             * 합산한 것과 같습니다.
             */
             public int getPrice() {
                           return burger.getPrice() + coke.getPrice() + fried.getPrice();
             }
             /**
             * 빅립버거세트의 개요는 빅립버거세트를 구성하는 빅립버거,코크,프렌치프라이의
             * 개요을 모두 나열하는 것으로 정하면 간명하겠네요.
             * 이게 싫다면 새로운 개요를 정해도 되겠습니다.
             */
             public String getDescription() {
                           StringBuffer sb = new StringBuffer();
                           sb.append(burger.getDescription()).append(",");
                           sb.append(coke.getDescription()).append(",");
                           sb.append(fried.getDescription()).append("\n");
                           return sb.toString();
             }
             public static void main(String[] args) {
                           BigRibBurgerSet bs =
                                        new BigRibBurgerSet(new BigRibBurger(),new Coke(),new FrenchFried());
                           System.out.println("BigRibBurgerSet's Price = " + bs.getPrice());
                           System.out.println("BigRibBurgerSet = " + bs.getDescription());
             }
}
예제 3 - 4 BigRibBurgerSet.java
 
 
예제 3 - 4 BigRibBurgerSet 클래스를 살펴보면 처음부터 새롭게 설계하지 않고, 기존의
객체들을 합해서 만들어 냈습니다.
 
그림 3 - 1 [ compile run (BigRibBurgerSet.java) ]
 
 
이렇게 콤포지션을 사용하여 새로운 객체를 만들어 내는 것을 실제로 아주 빈번하고
또한 좋은 설계방법이라고 생각합니다. 이런 콤포지션을 이용하는 방법은 객체의 형태를
이용한다기 보다는 기존의 객체가 갖고 있는 기능을 충분히 활용하는 것이고, 개념적으로도
상당히 쉽게 접근할 수 있습니다.
 
 
만약 BigRibBurgerSet를 콤포지션을 이용하지 않고, 그냥 만들었다면 아마 예제 3 - 5와
같이 만들수 있을 것입니다.
컴포지션 사용 아닌 예
package burger;                
/**
* 롯데리아에서 파는 맛있는 빅립버거세트
*/
public class BigRibBurgerSet {
             private int price;
             private String description;
 
             public BigRibBurgerSet(int price,String description) {
                           this.price = price;
                           this.description = description;
             }
             public BigRibBurgerSet(int price) {
                           this(price,"best selling burger set in 2002");
             }
             public BigRibBurgerSet(String description) {
                           this(2500,description);
             }
             public BigRibBurgerSet() {
                           this(2500,"best selling burger set in 2002");
             }
             public int getPrice() {
                           return price;
             }
             public String getDescription() {
                           return description;
             }
}
예제 3 - 5
 
빅립햄버거 세트역시 빅립햄버거와 마찮가지로 가격이 있고, 개요가 있는 정보이므로
예제 3 - 5와 같이 구성해도 별 무리는 없겠습니다만, 추후에 콜라가격이 변동을 하거나,
빅립버거의 가격이 변동을 하거나 어떤 변경이 있을 때 BigRibBurgerSet의 클래스의 경우
반드시 변동분을 일일이 반영해주어야 합니다. 왜냐하면 BigRibBurgerSet 클래스는
빅립햄버거,코크,프렌치 프라이드로 이루어져 있는 현실의 빅립햄버거세트에 대한 개념화를
빅립햄버거,코크,프렌치프라이드로 구성되어 있다고 생각하지 않고, 단지 가격과 개요만
있는 것으로 개념화해서 클래스를 설계 했기 때문입니다.
추후에 빅립햄버거의 가격이 500원 내리면 빅립햄버거 세트의 가격도 500원 자동으로
내려야하지만 예제 3 - 5의 클래스를 사용한 프로그램에서는 매우 곤란합니다.
예제 3 - 4의 클래스를 사용한 프로그램은 별 문제가 없을 겁니다. 왜냐하면
500원 할인된 빅립햄버거 객체를 생성자에서 받으면 되니까요.
 
예제 3 - 5 의 클래스 설계보다는 여러모로 보아 예제 3 - 4의 콤포지션을 이용하는
편이 훨씬 유연하고 , 프로그램의 사고가 우리가 살아가는 현실과 닮았습니다.
빅립버거세트의 가격은 빅립버거와 코크,프렌치프라이의 가격의 합과 같고,
빅립버거세트의 개요는 빅립버거와, 코크,프렌치프라이의 개요를 모두 합한것과
같으니까요. 

