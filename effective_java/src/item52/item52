아이템52. 다중정의(Overloading)는 신중히 사용하라
package item52;
import java.math.BigInteger;
import java.util.*;
//코드 52-1 컬렉션 분류기 - 오류! 이 프로그램은 무엇을 출력할까? (312쪽)
public class CollectionClassifier {
 public static String classify(Set<?> s) {
     return "집합";
 }

 public static String classify(List<?> lst) {
     return "리스트";
 }

 public static String classify(Collection<?> c) {
     return "그 외";
 }

 public static void main(String[] args) {
     Collection<?>[] collections = {
             new HashSet<String>(),
             new ArrayList<BigInteger>(),
             new HashMap<String, String>().values()
     };

     for (Collection<?> c : collections)
         System.out.println(classify(c));
 }
}

뭐라고 나올까요??

오버로딩은!!
다중정의(overloading)된 메소드(classify)중 어떤것을 호출할지는 런타임시에 정해진다.
위에 보면 for문에서 Collection 타입이다 하지만 런타임시에는 계속 바뀌지만 영향을 주지 못한다.
재정의된 메소드(Override)는 동적으로
다중정의된 메소드(overloading)는 정적으로 선택이 된다.
컴파일타임에, 오직 매개변수의 컴파일타임 타입에 의해 이뤄진다.



오버라이딩 overriding
package item52;

import java.util.*;

//재정의된 메서드 호출 메커니즘 (313쪽, 코드 52-2의 일부)
class Wine {
	String name() {
		return "포도주";
	}
}

//재정의된 메서드 호출 메커니즘 (313쪽, 코드 52-2의 일부)
class SparklingWine extends Wine {
	@Override
	String name() {
		return "발포성 포도주";
	}
}

//재정의된 메서드 호출 메커니즘 (313쪽, 코드 52-2의 일부)
class Champagne extends SparklingWine {
	@Override
	String name() {
		return "샴페인";
	}
}

//재정의된 메서드 호출 메커니즘 (313쪽, 코드 52-2의 일부)
public class Overriding {
	public static void main(String[] args) {
		List<Wine> wineList = List.of(new Wine(), new SparklingWine(), new Champagne());

		for (Wine wine : wineList)
			System.out.println(wine.name());
	}
}

출력결과는??




package item52;

import java.math.BigInteger;
import java.util.*;

// 수정된 컬렉션 분류기 (314쪽)
public class FixedCollectionClassifier {
    public static String classify(Collection<?> c) {
        return c instanceof Set ? "집합" :
                c instanceof List ? "리스트" : "그 외";
    }

    public static void main(String[] args) {
        Collection<?>[] collections = {
                new HashSet<String>(),
                new ArrayList<BigInteger>(),
                new HashMap<String, String>().values()
        };

        for (Collection<?> c : collections)
            System.out.println(classify(c));
    }
}

CollectionClassfier의 모든 classify 메서드를 하나로 합친 후 instanceof로 명시적으로 검사하면 말끔히 해결된다.

안전하고 보수적으로 가려면 매개변수 사가 같은 다중정의는 만들지말자.
매개변수 수가 같은 다중정의 메서드가 많더라도, 그중 어느 것이 주어진 매개변수 집합을 처리할지다 명확히 구분된다면 헷갈릴일은 없을 것이다.
하지만 자바5에서 오토박싱이 도입되면서 헷갈려지기 시작했다.
package item52;
import java.util.*;

//이 프로그램은 무엇을 출력할까? (315-316쪽)
public class SetList {
 public static void main(String[] args) {
     Set<Integer> set = new TreeSet<>();
     List<Integer> list = new ArrayList<>();

     for (int i = -3; i < 3; i++) {
         set.add(i);
         list.add(i);
     }
     for (int i = 0; i < 3; i++) {
         set.remove(i);
         list.remove(i);
     }
     System.out.println(set + " " + list);
 }
}

출력결과는??



제네릭이 도입되기 전 자바 4까지의 List에서는 Object와 int가 근본적으로 달라서 문제가 없었다. 그런데 제네릭과 오토박싱이 등장하면서 두 메서드의 매개변수 타입이 더는 근본적으로 다르지 않게 되었다. 

//이 프로그램은 무엇을 출력할까? (315-316쪽)
public class SetList2 {
 public static void main(String[] args) {
     Set<Integer> set = new TreeSet<>();
     List<Integer> list = new ArrayList<>();

     for (int i = -3; i < 3; i++) {
         set.add(i);
         list.add(i);
     }
     for (int i = 0; i < 3; i++) {
         set.remove(i);
         list.remove((Integer) i);
     }
     System.out.println(set + " " + list);
 }
}

또한, 자바 8에서 도입한 람다와 메서드 참조 역시 다중정의 시의 혼란을 키웠다.
	//1번 Thread의 생성자 호출
        new Thread(System.out::println).start();

        //2번 ExecutorService의 submit메서드 호출
        ExecutorService es = Executors.newCachedThreadPool();
        es.submit(System.out::println);


출력결과는??





Submit 다중 정의 메서드 중에는 Callable<T>를 받는 메서드도 있다.
하지만 모든 println이 void를 반환하니, 반환값이 있는 Callable과 헷갈릴 리는 없다고 생각할지도 모르겠다.
만약 println이 다중정의 없이 단 하나만 존재했다면 submit메서드 호출이 제대로 컴파일 됐을 것이다.
참조된 메서드(println)와 호출된 메서드(submit) 양쪽 다 다중정의 되어 저렇게 나왔다.
다중정의 된 메서드(혹은 생성자)들이 함수형 인터페이스를 인수로 받을 때, 비록 서로 다른 함수형 인터페이스라도 인수 위치가 같으면 혼란이 생긴다.
메서드를 다중정의할 때, 서로 다른 함수형 인터페이스라도 같은 위치의 인수로 받아서는 안 된다. 

핵심정리
일반적으로 매개변수 수가 같을 때는 다중정의를 피해라.
불가능할 때에는 헷갈릴 만한 매개변수는 형변환하여 정확한 다중정의 메서드가 선택되도록 해야 한다.
불가능하면, 기존 클래스를 수정해 새로운 인터페이스를 구현해야 할 때는 같은 객체를 입력받는 다중정의 메서드들이 모두 동일하게 동작하도록 만들어야 한다.
